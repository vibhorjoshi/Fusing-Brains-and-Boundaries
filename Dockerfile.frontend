# Multi-stage build for GeoAI Frontend
FROM node:18-alpine as builder

# Set working directory
WORKDIR /app

# Copy package files (if they exist)
COPY frontend/package*.json ./
RUN if [ -f package.json ]; then npm install; fi

# Copy frontend source
COPY frontend/ .
COPY demo_frontend.html /app/public/

# Build the frontend (if it's a React/Vue app)
RUN if [ -f package.json ]; then npm run build 2>/dev/null || echo "No build script found"; fi

# Production stage with nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy nginx configuration
COPY nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built frontend files
COPY --from=builder /app/public/ /usr/share/nginx/html/

# Copy our demo frontend
COPY demo_frontend.html /usr/share/nginx/html/index.html

# Copy built assets if they exist
RUN if [ -d /app/dist ]; then cp -r /app/dist/* /usr/share/nginx/html/; fi
RUN if [ -d /app/build ]; then cp -r /app/build/* /usr/share/nginx/html/; fi

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><body>OK</body></html>' > /usr/share/nginx/html/health.html

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 644 /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health.html || exit 1

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]