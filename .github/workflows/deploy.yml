name: GeoAI Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  test-backend:
    name: Backend Testing & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        
    - name: Install Backend Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov bandit safety
        
    - name: Security Scan with Bandit
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Safety Check for Vulnerabilities
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Run Backend Tests
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        
  test-frontend:
    name: Frontend Testing & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci
      
    - name: Lint Frontend Code
      working-directory: frontend
      run: npm run lint
      
    - name: Type Check
      working-directory: frontend
      run: npm run type-check
      
    - name: Run Frontend Tests
      working-directory: frontend
      run: npm run test
      
    - name: Build Frontend
      working-directory: frontend
      run: npm run build
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next
        
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/geoai-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/geoai-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/geoai-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/geoai-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USERNAME }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/geoai-staging
          docker-compose down
          docker-compose pull
          docker-compose up -d
          docker system prune -f
          
    - name: Health Check
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Production Servers
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USERNAME }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/geoai-production
          
          # Blue-Green Deployment
          if docker-compose -f docker-compose.blue.yml ps | grep -q "Up"; then
            export ACTIVE_ENV=blue
            export INACTIVE_ENV=green
          else
            export ACTIVE_ENV=green
            export INACTIVE_ENV=blue
          fi
          
          # Deploy to inactive environment
          docker-compose -f docker-compose.$INACTIVE_ENV.yml down
          docker-compose -f docker-compose.$INACTIVE_ENV.yml pull
          docker-compose -f docker-compose.$INACTIVE_ENV.yml up -d
          
          # Health check
          sleep 60
          curl -f http://localhost:800$([[ $INACTIVE_ENV == "blue" ]] && echo "2" || echo "3")/health
          
          # Switch traffic
          docker-compose -f docker-compose.$ACTIVE_ENV.yml down
          
          # Cleanup
          docker system prune -f
          
    - name: Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Load Tests
      run: |
        pip install locust
        locust -f tests/performance/locustfile.py \
          --host ${{ secrets.STAGING_URL }} \
          --users 100 \
          --spawn-rate 10 \
          --run-time 5m \
          --html performance-report.html
          
    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html
        
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run OWASP ZAP Security Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: ${{ secrets.STAGING_URL }}
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'