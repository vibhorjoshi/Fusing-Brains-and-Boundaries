name: "🔒 Security Scanning"

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  dependency-scan:
    name: 🔍 Python Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 📦 Install Security Tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          
      - name: 📦 Install Project Dependencies
        run: |
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found"
          fi
        continue-on-error: true
          
      - name: 🔎 Run Safety Check
        run: |
          mkdir -p security-reports
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --json > security-reports/safety-report.json || echo "[]" > security-reports/safety-report.json
            safety check -r requirements.txt --full-report > security-reports/safety-full.txt || echo "No vulnerabilities found" > security-reports/safety-full.txt
          else
            echo "[]" > security-reports/safety-report.json
            echo "No requirements.txt found" > security-reports/safety-full.txt
          fi
        continue-on-error: true
        
      - name: 🔍 Run Bandit Security Check
        run: |
          bandit -r . -f json -o security-reports/bandit-report.json -x "*/tests/*,*/test_*,*/.git/*,*/venv/*,*/.venv/*" || echo '{"results": []}' > security-reports/bandit-report.json
          bandit -r . -f txt -o security-reports/bandit-full.txt -x "*/tests/*,*/test_*,*/.git/*,*/venv/*,*/.venv/*" || echo "No issues found" > security-reports/bandit-full.txt
        continue-on-error: true
        
      - name: 🔍 Run Semgrep Security Check
        run: |
          semgrep --config=auto --json -o security-reports/semgrep-report.json . || echo '{"results": []}' > security-reports/semgrep-report.json
          semgrep --config=auto -o security-reports/semgrep-full.txt . || echo "No issues found" > security-reports/semgrep-full.txt
        continue-on-error: true
        
      - name: 📊 Generate Security Summary
        run: |
          echo "# Security Scan Summary" > security-reports/summary.md
          echo "" >> security-reports/summary.md
          echo "Generated on: $(date)" >> security-reports/summary.md
          echo "" >> security-reports/summary.md
          
          echo "## Dependency Vulnerabilities (Safety)" >> security-reports/summary.md
          if [ -f security-reports/safety-report.json ]; then
            python3 -c "
import json
try:
    with open('security-reports/safety-report.json') as f:
        data = json.load(f)
    print(f'Found {len(data)} dependency vulnerabilities')
    with open('security-reports/summary.md', 'a') as f:
        if len(data) == 0:
            f.write('✅ No dependency vulnerabilities found\n\n')
        else:
            f.write(f'⚠️ Found {len(data)} dependency vulnerabilities\n\n')
except:
    with open('security-reports/summary.md', 'a') as f:
        f.write('❌ Error processing safety report\n\n')
"
          fi
          
          echo "## Code Security Issues (Bandit)" >> security-reports/summary.md
          if [ -f security-reports/bandit-report.json ]; then
            python3 -c "
import json
try:
    with open('security-reports/bandit-report.json') as f:
        data = json.load(f)
    results = data.get('results', [])
    print(f'Found {len(results)} code security issues')
    with open('security-reports/summary.md', 'a') as f:
        if len(results) == 0:
            f.write('✅ No code security issues found\n\n')
        else:
            f.write(f'⚠️ Found {len(results)} code security issues\n\n')
            high_issues = [r for r in results if r.get('issue_severity') == 'HIGH']
            medium_issues = [r for r in results if r.get('issue_severity') == 'MEDIUM']
            low_issues = [r for r in results if r.get('issue_severity') == 'LOW']
            f.write(f'- High: {len(high_issues)}\n')
            f.write(f'- Medium: {len(medium_issues)}\n')
            f.write(f'- Low: {len(low_issues)}\n\n')
except:
    with open('security-reports/summary.md', 'a') as f:
        f.write('❌ Error processing bandit report\n\n')
"
          fi
          
          echo "## Static Analysis (Semgrep)" >> security-reports/summary.md
          if [ -f security-reports/semgrep-report.json ]; then
            python3 -c "
import json
try:
    with open('security-reports/semgrep-report.json') as f:
        data = json.load(f)
    results = data.get('results', [])
    print(f'Found {len(results)} static analysis issues')
    with open('security-reports/summary.md', 'a') as f:
        if len(results) == 0:
            f.write('✅ No static analysis issues found\n\n')
        else:
            f.write(f'⚠️ Found {len(results)} static analysis issues\n\n')
except:
    with open('security-reports/summary.md', 'a') as f:
        f.write('❌ Error processing semgrep report\n\n')
"
          fi
          
          echo "## Recommendations" >> security-reports/summary.md
          echo "1. Review all HIGH severity issues first" >> security-reports/summary.md
          echo "2. Update vulnerable dependencies" >> security-reports/summary.md
          echo "3. Address code security issues" >> security-reports/summary.md
          echo "4. Run security scans regularly" >> security-reports/summary.md
          
      - name: 📤 Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: security-reports/
          retention-days: 30

  docker-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'  # Skip Docker scan for scheduled runs
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🏗️ Build Test Image
        run: |
          # Try different Dockerfile locations
          if [ -f "Dockerfile" ]; then
            docker build -t test-image:latest .
          elif [ -f "backend/Dockerfile" ]; then
            docker build -t test-image:latest backend/
          elif [ -f "Dockerfile.backend" ]; then
            docker build -t test-image:latest -f Dockerfile.backend .
          else
            echo "FROM python:3.9-slim" > Dockerfile.temp
            echo "WORKDIR /app" >> Dockerfile.temp
            echo "COPY . ." >> Dockerfile.temp
            echo "CMD python --version" >> Dockerfile.temp
            docker build -t test-image:latest -f Dockerfile.temp .
          fi
        continue-on-error: true
        
      - name: 🔎 Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'test-image:latest'
          format: 'json'
          output: 'docker-security.json'
        continue-on-error: true
        
      - name: 📊 Process Docker Scan Results
        run: |
          mkdir -p docker-reports
          if [ -f docker-security.json ]; then
            cp docker-security.json docker-reports/
            echo "# Docker Security Scan Results" > docker-reports/docker-summary.md
            echo "" >> docker-reports/docker-summary.md
            echo "Scan completed on: $(date)" >> docker-reports/docker-summary.md
            echo "" >> docker-reports/docker-summary.md
            
            python3 -c "
import json
try:
    with open('docker-security.json') as f:
        data = json.load(f)
    
    total_vulns = 0
    critical = high = medium = low = unknown = 0
    
    for result in data.get('Results', []):
        for vuln in result.get('Vulnerabilities', []):
            total_vulns += 1
            severity = vuln.get('Severity', 'UNKNOWN').upper()
            if severity == 'CRITICAL': critical += 1
            elif severity == 'HIGH': high += 1
            elif severity == 'MEDIUM': medium += 1
            elif severity == 'LOW': low += 1
            else: unknown += 1
    
    with open('docker-reports/docker-summary.md', 'a') as f:
        if total_vulns == 0:
            f.write('✅ No vulnerabilities found in Docker image\n')
        else:
            f.write(f'⚠️ Found {total_vulns} vulnerabilities\n\n')
            f.write('| Severity | Count |\n')
            f.write('|----------|-------|\n')
            f.write(f'| Critical | {critical} |\n')
            f.write(f'| High     | {high} |\n')
            f.write(f'| Medium   | {medium} |\n')
            f.write(f'| Low      | {low} |\n')
            if unknown > 0:
                f.write(f'| Unknown  | {unknown} |\n')
except Exception as e:
    with open('docker-reports/docker-summary.md', 'a') as f:
        f.write(f'❌ Error processing results: {e}\n')
"
          else
            echo "❌ No Docker scan results found" > docker-reports/docker-summary.md
          fi
        continue-on-error: true
        
      - name: 📤 Upload Docker Reports
        uses: actions/upload-artifact@v3
        with:
          name: docker-security-reports
          path: docker-reports/
          retention-days: 30
        if: always()

  security-summary:
    name: 🛡️ Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, docker-scan]
    if: always()
    
    steps:
      - name: 📥 Download Dependency Reports
        uses: actions/download-artifact@v3
        with:
          name: security-reports
          path: reports/dependency/
        continue-on-error: true
        
      - name: 📥 Download Docker Reports
        uses: actions/download-artifact@v3
        with:
          name: docker-security-reports
          path: reports/docker/
        continue-on-error: true
        
      - name: 📊 Create Combined Summary
        run: |
          mkdir -p final-report
          echo "# Combined Security Report" > final-report/security-report.md
          echo "" >> final-report/security-report.md
          echo "Security scan completed on: $(date)" >> final-report/security-report.md
          echo "" >> final-report/security-report.md
          
          if [ -f "reports/dependency/summary.md" ]; then
            echo "## Dependency & Code Security" >> final-report/security-report.md
            tail -n +4 reports/dependency/summary.md >> final-report/security-report.md
          else
            echo "## Dependency & Code Security" >> final-report/security-report.md
            echo "❌ No dependency scan results available" >> final-report/security-report.md
          fi
          
          echo "" >> final-report/security-report.md
          
          if [ -f "reports/docker/docker-summary.md" ]; then
            echo "## Docker Security" >> final-report/security-report.md
            tail -n +4 reports/docker/docker-summary.md >> final-report/security-report.md
          else
            echo "## Docker Security" >> final-report/security-report.md
            echo "❌ No Docker scan results available" >> final-report/security-report.md
          fi
          
          echo "" >> final-report/security-report.md
          echo "---" >> final-report/security-report.md
          echo "*This report was generated automatically by GitHub Actions*" >> final-report/security-report.md
        
      - name: 📤 Upload Final Report
        uses: actions/upload-artifact@v3
        with:
          name: final-security-report
          path: final-report/
          retention-days: 90
          
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-path: final-report/security-report.md
        continue-on-error: true