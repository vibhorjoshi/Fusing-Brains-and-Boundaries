version: '3.8'

services:
  # Main FastAPI Backend
  backend:
    build: 
      context: .
    container_name: building_footprint_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/building_footprint_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=your-super-secret-key-change-in-production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=us-west-2
      - S3_BUCKET_NAME=building-footprint-ai-data
    depends_on:
      - db
      - redis
    networks:
      - backend_network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./exports:/app/exports
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build: 
      context: .
    container_name: building_footprint_celery
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/building_footprint_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=your-super-secret-key-change-in-production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=us-west-2
      - S3_BUCKET_NAME=building-footprint-ai-data
    depends_on:
      - db
      - redis
    networks:
      - backend_network
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./exports:/app/exports
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build: 
      context: .
    container_name: building_footprint_beat
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/building_footprint_ai
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      - db
      - redis
    networks:
      - backend_network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  # PostgreSQL Database
  db:
    image: postgis/postgis:15-3.3
    container_name: building_footprint_db
    environment:
      - POSTGRES_DB=building_footprint_ai
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Message Broker & Cache)
  redis:
    image: redis:7-alpine
    container_name: building_footprint_redis
    ports:
      - "6379:6379"
    networks:
      - backend_network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: building_footprint_nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - backend_network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - backend
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    build: 
      context: .
    container_name: building_footprint_flower
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - backend_network
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus
    container_name: building_footprint_prometheus
    ports:
      - "9090:9090"
    networks:
      - backend_network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana
    container_name: building_footprint_grafana
    ports:
      - "3000:3000"
    networks:
      - backend_network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped

networks:
  backend_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local