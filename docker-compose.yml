version: '3.8'

services:
  # Redis for caching and job storage
  redis:
    image: redis:7.2-alpine
    container_name: geoai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - geoai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes

  # FastAPI Backend ML Server
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: geoai-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - FRONTEND_URL=http://frontend:3000
      - GPU_ENABLED=1
      - MAX_BATCH_SIZE=16
    volumes:
      - ./data:/app/data
      - ./outputs:/app/outputs
      - ./models:/app/models
    networks:
      - geoai-network
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Interface
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: geoai-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8002
      - NODE_ENV=production
    networks:
      - geoai-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health.html"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: geoai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - geoai-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

volumes:
  redis_data:
    driver: local

networks:
  geoai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16